# -*- coding: utf-8 -*-
"""AIML_Task5

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WZTmC8IiCo3XDF7dU9OzYecg6gf0WxWS
"""

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, cross_val_score
from sklearn.tree import DecisionTreeClassifier, plot_tree, export_graphviz
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns


df = pd.read_csv("/content/archive (3).zip")
print("Dataset Shape:", df.shape)
print(df.head())

X = df.drop("target", axis=1)
y = df["target"]


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)


dt = DecisionTreeClassifier(random_state=42)
dt.fit(X_train, y_train)

y_pred_dt = dt.predict(X_test)
print("\nDecision Tree Accuracy:", accuracy_score(y_test, y_pred_dt))
print(classification_report(y_test, y_pred_dt))

sns.heatmap(confusion_matrix(y_test, y_pred_dt), annot=True, fmt='d', cmap='Blues')
plt.title("Decision Tree Confusion Matrix")
plt.show()

dt_limited = DecisionTreeClassifier(max_depth=4, random_state=42)
dt_limited.fit(X_train, y_train)
print("\nDecision Tree (max_depth=4) Accuracy:", accuracy_score(y_test, dt_limited.predict(X_test)))

plt.figure(figsize=(15, 8))
plot_tree(dt_limited, feature_names=X.columns, class_names=["No Disease", "Disease"], filled=True)
plt.show()


export_graphviz(dt_limited, out_file="decision_tree.dot", feature_names=X.columns,
                class_names=["No Disease", "Disease"], filled=True)


rf = RandomForestClassifier(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)

y_pred_rf = rf.predict(X_test)
print("\nRandom Forest Accuracy:", accuracy_score(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))


importances = pd.Series(rf.feature_importances_, index=X.columns).sort_values(ascending=False)
print("\nFeature Importances:\n", importances)

plt.figure(figsize=(10, 6))
sns.barplot(x=importances, y=importances.index)
plt.title("Random Forest Feature Importances")
plt.show()


dt_cv_score = cross_val_score(dt_limited, X, y, cv=5).mean()
rf_cv_score = cross_val_score(rf, X, y, cv=5).mean()

print(f"\nCross-Validation Accuracy (Decision Tree, max_depth=4): {dt_cv_score:.4f}")
print(f"Cross-Validation Accuracy (Random Forest): {rf_cv_score:.4f}")